openapi: 3.0.3
info:
  title: Audiobook API
  description: |
    A comprehensive API for managing and consuming audiobook content.
    
    This API provides functionality for:
    - User authentication via Auth0
    - Story management and discovery
    - Content delivery (text, audio, images)
    - User profile management and preferences
    - Reading statistics and achievements
    - Support system with FAQs
    - User feedback and library management
    
    Version 1.1.0 introduces comprehensive profile features for mobile apps.
    The API is designed for integration with external applications and services.
  version: 1.1.0
  contact:
    name: Audiobook API Support
  license:
    name: MIT

servers:
  - url: https://your-domain.com
    description: Production server
  - url: https://dev.your-domain.com  
    description: Development server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  # Health Check
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the API health status
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  # Authentication Endpoints
  /api/auth/login:
    get:
      tags:
        - Authentication
      summary: Initiate login process
      description: Redirects to Auth0 for user authentication
      responses:
        '302':
          description: Redirect to Auth0 login
        '400':
          description: Invalid request

  /api/auth/callback:
    get:
      tags:
        - Authentication
      summary: Handle Auth0 callback
      description: Processes the Auth0 callback and establishes user session
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code from Auth0
        - name: state
          in: query
          required: true
          schema:
            type: string
          description: State parameter for CSRF protection
      responses:
        '302':
          description: Redirect to application home
        '400':
          description: Invalid state or code
        '401':
          description: Token exchange failed

  /api/auth/logout:
    get:
      tags:
        - Authentication
      summary: Logout user
      description: Clears user session and redirects to Auth0 logout
      responses:
        '302':
          description: Redirect to Auth0 logout

  /api/auth/session:
    get:
      tags:
        - Authentication
      summary: Get current user session
      description: Returns current user information if authenticated
      responses:
        '200':
          description: Session information
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      authenticated:
                        type: boolean
                        example: true
                      user:
                        $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      authenticated:
                        type: boolean
                        example: false

  # Health Check
  /api/health:
    get:
      tags:
        - System
      summary: Health check
      description: Returns the health status of the API
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-08-24T15:59:46.476Z"
                  version:
                    type: string
                    example: "1.0.0"

  # Stories Endpoints
  /api/stories:
    get:
      tags:
        - Stories
      summary: List stories
      description: Get a list of stories with optional filtering
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Search term for title, description, or author
        - name: language
          in: query
          schema:
            type: string
          description: Filter by origin language or supported language
        - name: genre
          in: query
          schema:
            type: string
          description: Filter by genre
        - name: author
          in: query
          schema:
            type: string
          description: Filter by author name
        - name: status
          in: query
          schema:
            type: string
            enum: [published, draft, archived, all]
            default: "published"
          description: Filter by story status
        - name: tags
          in: query
          schema:
            type: string
          description: Comma-separated list of tags to filter by
        - name: translation_status
          in: query
          schema:
            type: string
            enum: [master, translated, in_progress, needs_review]
          description: Filter by translation status for multilanguage support
      responses:
        '200':
          description: List of stories
          content:
            application/json:
              schema:
                type: object
                properties:
                  stories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Story'
    
    post:
      tags:
        - Stories
      summary: Create new story
      description: Create a new story with metadata
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStoryRequest'
      responses:
        '201':
          description: Story created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized

  /api/stories/{id}:
    get:
      tags:
        - Stories
      summary: Get complete story by ID with unified metadata
      description: |
        **ENHANCED STORY ENDPOINT** - Returns complete story information with unified metadata architecture.
        
        This endpoint has been upgraded to work with the new progressive upload system:
        - **Priority Order**: First checks for complete metadata from progressive uploads, then falls back to legacy data
        - **Complete Content Blocks**: When available, returns full content blocks with proper ordering
        - **Fixed Data Issues**: Resolved title/description problems where wrong data was being returned
        - **Asset Integration**: Includes complete asset information with URLs and metadata
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique story identifier
        - name: language
          in: query
          schema:
            type: string
            default: "en"
          description: Language code for localized content
      responses:
        '200':
          description: Complete story information with unified metadata
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CompleteStoryMetadata'
                  - $ref: '#/components/schemas/Story'
        '404':
          description: Story not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/stories/genres:
    get:
      tags:
        - Stories
      summary: Get available genres
      description: Returns list of all available story genres
      responses:
        '200':
          description: List of genres
          content:
            application/json:
              schema:
                type: object
                properties:
                  genres:
                    type: array
                    items:
                      type: string

  /api/stories/tags:
    get:
      tags:
        - Stories
      summary: Get available tags
      description: Returns list of all available story tags
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      type: string

  /api/stories/authors:
    get:
      tags:
        - Stories
      summary: Get available authors
      description: Returns list of all available authors
      responses:
        '200':
          description: List of authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  authors:
                    type: array
                    items:
                      type: string

  # Content Endpoints
  /api/content/{storyId}/metadata/{language}:
    get:
      tags:
        - Content
      summary: Get story metadata
      description: |
        **UNIFIED CONTENT ENDPOINT** - Returns story metadata directly from R2 storage per UNIFIED-CONTENT-SPEC.md
        
        **R2 Storage:** `stories/{storyId}/{language}/metadata.json`
        
        **Response Format (Direct from metadata.json):**
        ```json
        {
          "id": "story-id",
          "title": "Story Title",
          "author": "AI Story Weaver",
          "description": "Story description...",
          "coverImage": "https://audiobook-dev.sunny250486.workers.dev/api/content/story-id/image/en/cover.jpg",
          "thumbnail": "https://audiobook-dev.sunny250486.workers.dev/api/content/story-id/image/en/thumbnail.jpg", 
          "originLanguage": "en",
          "supportedLanguages": ["en"],
          "totalChapters": 5,
          "genre": "Fantasy",
          "readingTime": 45,
          "tags": ["fantasy", "adventure"],
          "status": "published"
        }
        ```
        
        **Key Features:**
        - Serves metadata.json directly from R2 storage
        - No chapters array (use chapter endpoint for individual chapters)
        - totalChapters field indicates number of chapters available
        - Image URLs converted to full absolute URLs
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Unique story identifier
        - name: language
          in: path
          required: true
          schema:
            type: string
          description: Language code (e.g., 'en', 'es')
      responses:
        '200':
          description: Complete story metadata with content blocks and assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnhancedStoryMetadata'
        '404':
          description: Metadata not found


  /api/content/{storyId}/{type}/{language}/{file}:
    get:
      tags:
        - Content
      summary: Get story content (Unified Access Pattern)
      description: |
        **UNIFIED MEDIA ACCESS PATTERN** - Single endpoint for all story content types.
        
        This endpoint serves all media types using a consistent URL structure:
        - Images: `/api/content/{storyId}/image/{language}/{file}`
        - Audio: `/api/content/{storyId}/audio/{language}/{file}`  
        - Chapters: `/api/content/{storyId}/chapter/{language}/{file}`
        - Metadata: `/api/content/{storyId}/metadata/{language}`
        
        **Key Benefits:**
        - Unified URL structure for all content types
        - Consistent caching and CDN optimization
        - Simplified client-side code
        - Future-proof for new content types
        
        **Storage Structure in R2:**
        ```
        stories/{storyId}/{language}/
        ├── assets/
        │   ├── images/{filename}
        │   └── audios/{filename}
        ├── content/{filename}
        └── metadata.json
        ```
        
        **Audio File Format Requirements:**
        - Supported formats: MP3, WAV, M4A, OGG, FLAC
        - Recommended format: MP3 at 128kbps for optimal size/quality balance
        - Files should be optimized for streaming with proper headers
        - Maximum file size: 100MB per audio file
        
        **Audio Content Block Structure:**
        ```json
        {
          "id": "audio_block_1",
          "type": "audio",
          "content": {
            "url": "/api/content/{storyId}/audio/{language}/{filename}",
            "description": "Chapter narration",
            "duration": 180.5
          }
        }
        ```
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Unique story identifier
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [image, audio, chapter, metadata]
          description: Content type to retrieve
        - name: language
          in: path
          required: true
          schema:
            type: string
          description: Language code (e.g., 'en', 'es')
        - name: file
          in: path
          required: true
          schema:
            type: string
          description: |
            Filename or content identifier:
            - For images: image filename (e.g., 'chapter1_scene1.jpg')
            - For audio: audio filename (e.g., 'chapter1_narration.mp3')
            - For chapters: chapter filename (e.g., 'chapter1.json')
            - For metadata: not used (metadata.json is served)
      responses:
        '200':
          description: Content successfully retrieved
          content:
            # Image content types
            image/jpeg:
              schema:
                type: string
                format: binary
              example: "[Binary image data]"
            image/png:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            # Audio content types  
            audio/mpeg:
              schema:
                type: string
                format: binary
              example: "[Binary audio data]"
            audio/wav:
              schema:
                type: string
                format: binary
            audio/mp4:
              schema:
                type: string
                format: binary
            audio/ogg:
              schema:
                type: string
                format: binary
            audio/flac:
              schema:
                type: string
                format: binary
            # JSON content types
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StoryMetadata'
                  - $ref: '#/components/schemas/ChapterContent'
              example:
                # Example chapter content
                id: "chapter1"
                title: "The Beginning"
                blocks: [
                  {
                    "id": "block1",
                    "type": "heading_1", 
                    "content": {
                      "text": "Chapter 1: The Adventure Begins"
                    }
                  },
                  {
                    "id": "block2", 
                    "type": "image",
                    "content": {
                      "url": "/api/content/story-id/image/en/chapter1_scene1.jpg",
                      "description": "A mysterious forest path"
                    }
                  },
                  {
                    "id": "block3",
                    "type": "audio", 
                    "content": {
                      "url": "/api/content/story-id/audio/en/chapter1_narration.mp3",
                      "description": "Chapter 1 narration"
                    }
                  }
                ]
        '400':
          description: Invalid content type or malformed request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unknown content type: video"
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Content not found"
                  key:
                    type: string
                    example: "stories/story-id/en/assets/images/missing-file.jpg"

  # Enhanced Content Endpoints with Accept-Language Support
  /api/content/{storyId}/image/{filename}:
    get:
      tags:
        - Content
      summary: Serve images with automatic language fallback
      description: |
        **ENHANCED IMAGE ENDPOINT** - Serves images with intelligent language fallback
        
        **Language Detection:**
        - Uses `Accept-Language` header to determine preferred language
        - Falls back to master language if localized version not found
        - Returns `Content-Language` header indicating served language
        - Includes `X-Fallback-Used` header if fallback occurred
        
        **Path Structure:**
        - Target: `stories/{storyId}/{language}/assets/images/{filename}`
        - Fallback: `stories/{storyId}/en/assets/images/{filename}` (master)
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Unique story identifier
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Image filename (e.g., cover.jpg, thumbnail.png)
        - name: Accept-Language
          in: header
          schema:
            type: string
          description: |
            Language preference (RFC 7231 format)
            Example: "es,en;q=0.9" prefers Spanish, fallback to English
      responses:
        '200':
          description: Image served successfully
          headers:
            Content-Language:
              description: Language of served content
              schema:
                type: string
            X-Fallback-Used:
              description: Whether fallback to master language occurred
              schema:
                type: string
                enum: ["true", "false"]
            Vary:
              description: Indicates response varies by Accept-Language
              schema:
                type: string
                example: "Accept-Language"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found in any language
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/content/{storyId}/audio/{filename}:
    get:
      tags:
        - Content
      summary: Serve audio with automatic language fallback
      description: |
        **ENHANCED AUDIO ENDPOINT** - Serves audio files with intelligent language fallback
        
        **Language Detection:**
        - Uses `Accept-Language` header to determine preferred language
        - Falls back to master language if localized version not found
        - Returns `Content-Language` header indicating served language
        - Includes `X-Fallback-Used` header if fallback occurred
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Unique story identifier
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Audio filename (e.g., chapter1.mp3, narration.wav)
        - name: Accept-Language
          in: header
          schema:
            type: string
          description: Language preference (RFC 7231 format)
      responses:
        '200':
          description: Audio served successfully
          headers:
            Content-Language:
              description: Language of served content
              schema:
                type: string
            X-Fallback-Used:
              description: Whether fallback to master language occurred
              schema:
                type: string
                enum: ["true", "false"]
            Vary:
              description: Indicates response varies by Accept-Language
              schema:
                type: string
                example: "Accept-Language"
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
            audio/wav:
              schema:
                type: string
                format: binary
        '404':
          description: Audio file not found in any language
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Language-Explicit Content Endpoints (Direct Language Specification)
  /api/content/{storyId}/image/{language}/{filename}:
    get:
      tags:
        - Content
      summary: Serve images with explicit language specification
      description: |
        **LANGUAGE-EXPLICIT IMAGE ENDPOINT** - Direct language specification
        
        **Features:**
        - Explicit language parameter in URL path
        - Fallback to master language (en) if specified language not available
        - Returns Content-Language and X-Fallback-Used headers
        - Optimized for CDN caching with language-specific URLs
        
        **Path Structure:**
        - Target: `stories/{storyId}/{language}/assets/images/{filename}`
        - Fallback: `stories/{storyId}/en/assets/images/{filename}` (master)
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Unique story identifier
        - name: language
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-z]{2,3}$
          description: Language code (ISO 639-1/639-2)
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Image filename (e.g., cover.jpg, chapter1.png)
      responses:
        '200':
          description: Image served successfully
          headers:
            Content-Language:
              description: Language of served content
              schema:
                type: string
            X-Fallback-Used:
              description: Whether fallback to master language occurred
              schema:
                type: string
                enum: ["true", "false"]
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found in specified or master language
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/content/{storyId}/audio/{language}/{filename}:
    get:
      tags:
        - Content
      summary: Serve audio with explicit language specification
      description: |
        **LANGUAGE-EXPLICIT AUDIO ENDPOINT** - Direct language specification
        
        **Features:**
        - Explicit language parameter in URL path
        - Fallback to master language (en) if specified language not available
        - Returns Content-Language and X-Fallback-Used headers
        - Optimized for CDN caching and mobile app deep linking
        
        **Path Structure:**
        - Target: `stories/{storyId}/{language}/assets/audios/{filename}`
        - Fallback: `stories/{storyId}/en/assets/audios/{filename}` (master)
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Unique story identifier
        - name: language
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-z]{2,3}$
          description: Language code (ISO 639-1/639-2)
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Audio filename (e.g., chapter1.mp3, narration.wav)
      responses:
        '200':
          description: Audio served successfully
          headers:
            Content-Language:
              description: Language of served content
              schema:
                type: string
            X-Fallback-Used:
              description: Whether fallback to master language occurred
              schema:
                type: string
                enum: ["true", "false"]
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
            audio/wav:
              schema:
                type: string
                format: binary
            audio/ogg:
              schema:
                type: string
                format: binary
            audio/mp4:
              schema:
                type: string
                format: binary
        '404':
          description: Audio file not found in specified or master language
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # StoryGen Import with Multilanguage Support
  /api/import/storygen/multilang:
    post:
      tags:
        - Import
      summary: Import multilanguage story from StoryGen
      description: |
        **MULTILANGUAGE STORYGEN IMPORT** - Import complete multilanguage stories
        
        **Features:**
        - Master story import with multiple translations
        - Automatic translation quality validation
        - Asset localization support
        - Database optimization for multilanguage queries
        
        **Authentication Required**: StoryGen API key or development mode
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - masterLanguage
                - storyData
              properties:
                masterLanguage:
                  type: string
                  pattern: ^[a-z]{2}$
                  description: Master/origin language code (ISO 639-1)
                storyData:
                  $ref: '#/components/schemas/StorygenData'
                  description: Complete story data in master language
                translations:
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      title:
                        type: string
                      author:
                        type: string
                      description:
                        type: string
                      chapters:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            title:
                              type: string
                            blocks:
                              type: array
                              items:
                                type: object
                  description: Translations keyed by language code
                validateTranslations:
                  type: boolean
                  default: true
                  description: Whether to validate translation quality
      responses:
        '201':
          description: Multilanguage story imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  storyId:
                    type: string
                    description: Imported story identifier
                  languagesImported:
                    type: array
                    items:
                      type: string
                    description: List of language codes imported
                  validationResults:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/TranslationValidation'
                    description: Validation results for each language
        '400':
          description: Invalid import data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Progressive Translation Endpoints
  /api/import/storygen/{storyId}/translate/{language}/chapter/{chapterId}:
    post:
      tags:
        - Import
      summary: Upload partial chapter translation
      description: |
        **PROGRESSIVE TRANSLATION ENDPOINT** - Upload or update individual chapter translations
        
        **Features:**
        - Upload specific chapters in target language
        - Update existing translations incrementally
        - Track translation progress and quality
        - Support for incomplete translations that can be completed over time
        
        **Authentication Required**: StoryGen API key or development mode
      security:
        - ApiKeyAuth: []
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Existing story identifier
        - name: language
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-z]{2}$
          description: Target language code (ISO 639-1)
        - name: chapterId
          in: path
          required: true
          schema:
            type: string
          description: Chapter identifier to translate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterTranslation'
      responses:
        '200':
          description: Chapter translation uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  chapterId:
                    type: string
                    description: Updated chapter identifier
                  translationQuality:
                    $ref: '#/components/schemas/TranslationValidation'
                  syncVersion:
                    type: string
                    description: Version identifier for sync tracking
                  contentHash:
                    type: string
                    description: Hash of translated content for integrity
        '404':
          description: Story or chapter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid translation data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/import/storygen/{storyId}/translate/{language}/status:
    get:
      tags:
        - Import
      summary: Get translation progress status
      description: |
        **TRANSLATION STATUS ENDPOINT** - Get current translation progress and quality metrics
        
        Returns detailed information about translation completion, quality scores,
        and chapter-by-chapter progress for the specified language.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Story identifier
        - name: language
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-z]{2}$
          description: Target language code
      responses:
        '200':
          description: Translation status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  storyId:
                    type: string
                  language:
                    type: string
                  translationStatus:
                    type: string
                    enum: [not_started, in_progress, completed, needs_review]
                  overallQuality:
                    type: number
                    minimum: 0
                    maximum: 100
                    description: Overall translation quality score
                  completeness:
                    type: number
                    minimum: 0
                    maximum: 1
                    description: Translation completeness ratio
                  chapters:
                    type: array
                    items:
                      type: object
                      properties:
                        chapterId:
                          type: string
                        status:
                          type: string
                          enum: [not_started, in_progress, completed, needs_review]
                        qualityScore:
                          type: number
                        lastUpdated:
                          type: string
                          format: date-time
                        syncVersion:
                          type: string
                  lastUpdated:
                    type: string
                    format: date-time
        '404':
          description: Story or translation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Feedback Endpoints
  /api/stories/{id}/feedback:
    post:
      tags:
        - Feedback
      summary: Submit story feedback
      description: Submit rating and optional comment for a story
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Story ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
      responses:
        '200':
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Feedback submitted
                  id:
                    type: string
                    description: Feedback ID
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized

  # Progressive Upload System
  /api/progressive-upload/init:
    post:
      tags:
        - Progressive Upload
      summary: Initialize progressive upload session
      description: |
        Creates a draft story and returns upload URLs for assets. This API solves CloudFlare 413 "Request Entity Too Large" 
        issues by enabling parallel asset uploads that bypass size limits.
        
        **Benefits:**
        - Handles unlimited story sizes (100+ images)
        - Parallel asset uploads (much faster)
        - Real-time progress tracking
        - Individual asset retry capability
        - Atomic story publishing
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgressiveUploadInit'
      responses:
        '201':
          description: Upload session initialized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgressiveUploadInitResponse'
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Authentication required

  /api/progressive-upload/{storyId}/status:
    get:
      tags:
        - Progressive Upload
      summary: Get upload progress
      description: Returns real-time upload progress and individual asset status
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Story ID from initialization
      responses:
        '200':
          description: Upload progress retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgressiveUploadStatus'
        '404':
          description: Upload session not found

  /api/progressive-upload/upload/{storyId}/{assetId}:
    put:
      tags:
        - Progressive Upload
      summary: Upload individual asset
      description: |
        Fallback upload endpoint for individual assets. In production, storygen should use the presigned URLs 
        from the initialization response for direct R2 uploads, but this endpoint serves as a reliable fallback.
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Story ID
        - name: assetId
          in: path  
          required: true
          schema:
            type: string
          description: Asset ID from the asset manifest
      requestBody:
        required: true
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
          audio/mpeg:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Asset uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetUploadResponse'
        '404':
          description: Asset or session not found
        '410':
          description: Upload session expired or cancelled
        '500':
          description: Upload failed

  /api/progressive-upload/{storyId}/finalize:
    post:
      tags:
        - Progressive Upload
      summary: Finalize and publish story
      description: |
        Completes story processing and makes it visible to users. Only succeeds when all assets 
        have been uploaded successfully. Creates content blocks, processes assets, and atomically 
        publishes the story.
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Story ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                validateAssets:
                  type: boolean
                  description: Whether to validate all assets before publishing
                  default: true
                optimizeImages:
                  type: boolean
                  description: Whether to optimize images during processing
                  default: true
      responses:
        '200':
          description: Story finalized and published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgressiveUploadFinalizeResponse'
        '400':
          description: Not all assets uploaded or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not all assets have been uploaded"
                  details:
                    type: string
                    example: "3 assets remaining"
                  progress:
                    $ref: '#/components/schemas/UploadProgress'
        '404':
          description: Upload session not found
        '410':
          description: Upload session expired or cancelled

  /api/progressive-upload/{storyId}/cancel:
    delete:
      tags:
        - Progressive Upload
      summary: Cancel upload session
      description: Cancels the upload session and removes the draft story
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: Story ID
      responses:
        '200':
          description: Upload session cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  storyId:
                    type: string
                    example: "story-title"
                  status:
                    type: string
                    example: "cancelled"
                  message:
                    type: string
                    example: "Upload session cancelled and draft story removed"
        '404':
          description: No active upload session found

  # User Endpoints
  /api/user/library:
    get:
      tags:
        - User
      summary: Get user library
      description: Retrieves user's bookmarked stories
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's bookmarked stories
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookmarks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bookmark'
        '401':
          description: Unauthorized
    
    post:
      tags:
        - User
      summary: Add/remove bookmark
      description: Add or remove a story from user's library
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                story_id:
                  type: string
                action:
                  type: string
                  enum: [add, remove]
      responses:
        '200':
          description: Bookmark updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized

  /api/user/recent:
    get:
      tags:
        - User
      summary: Get recent activity
      description: Retrieves user's recent listening activity
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Recent activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  recent:
                    type: array
                    items:
                      $ref: '#/components/schemas/RecentActivity'
        '401':
          description: Unauthorized

  # User Session Endpoints
  /api/user/sessions:
    get:
      tags:
        - User Sessions
      summary: Get user session history
      description: Retrieves user's reading session history with analytics
      security:
        - BearerAuth: []
      parameters:
        - name: story_id
          in: query
          schema:
            type: string
          description: Filter by story ID
        - name: platform
          in: query
          schema:
            type: string
            enum: [web, mobile, tablet]
          description: Filter by platform
        - name: reading_mode
          in: query
          schema:
            type: string
            enum: [read, listen]
          description: Filter by reading mode
        - name: from_date
          in: query
          schema:
            type: string
            format: date-time
          description: Filter sessions from this date
        - name: to_date
          in: query
          schema:
            type: string
            format: date-time
          description: Filter sessions to this date
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of sessions to return
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of sessions to skip
      responses:
        '200':
          description: Session history with analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      sessions:
                        type: array
                        items:
                          $ref: '#/components/schemas/ReadingSession'
                      total_count:
                        type: integer
                      analytics:
                        $ref: '#/components/schemas/SessionAnalytics'
        '401':
          description: Unauthorized
    
    post:
      tags:
        - User Sessions
      summary: Start new reading session
      description: Start a new interactive reading session (real-time tracking)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartSessionRequest'
      responses:
        '200':
          description: Session started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      session_id:
                        type: string
                      started_at:
                        type: string
                        format: date-time
                      estimated_session_goals:
                        type: object
                        properties:
                          suggested_duration:
                            type: number
                          chapters_to_read:
                            type: integer
        '400':
          description: Missing required fields
        '401':
          description: Unauthorized
        '404':
          description: Story not found

  /api/user/sessions/completed:
    post:
      tags:
        - User Sessions
      summary: Create completed session (Mobile)
      description: Create a completed reading session directly (used by mobile app for offline sync)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletedSessionRequest'
      responses:
        '200':
          description: Completed session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      session_id:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      duration_seconds:
                        type: integer
                      status:
                        type: string
                        enum: [completed]
        '400':
          description: Missing required fields (storyId, sessionStart, readingMode)
        '401':
          description: Unauthorized
        '404':
          description: Story not found

  /api/user/sessions/{sessionId}:
    put:
      tags:
        - User Sessions
      summary: Update active session
      description: Update progress of an active reading session
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSessionRequest'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      session_id:
                        type: string
                      updated_at:
                        type: string
                        format: date-time
        '401':
          description: Unauthorized
        '404':
          description: Active session not found

  /api/user/sessions/{sessionId}/end:
    post:
      tags:
        - User Sessions
      summary: End reading session
      description: End an active reading session and get summary with achievements
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndSessionRequest'
      responses:
        '200':
          description: Session ended successfully with achievements
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      session:
                        $ref: '#/components/schemas/ReadingSession'
                      achievements:
                        type: array
                        items:
                          $ref: '#/components/schemas/Achievement'
                      progress_summary:
                        $ref: '#/components/schemas/ProgressSummary'
        '401':
          description: Unauthorized
        '404':
          description: Active session not found

  # User Profile Management
  /api/user/profile:
    get:
      tags:
        - User Profile
      summary: Get user profile and preferences
      description: Returns complete user profile information and preferences
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile and preferences retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      profile:
                        $ref: '#/components/schemas/UserProfile'
                      preferences:
                        $ref: '#/components/schemas/UserPreferences'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing or invalid Authorization header"
    patch:
      tags:
        - User Profile
      summary: Update user profile and preferences
      description: Updates user profile information and/or preferences
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Updated Name"
                    bio:
                      type: string
                      example: "Updated bio text"
                    defaultLanguage:
                      type: string
                      example: "es"
                    timezone:
                      type: string
                      example: "America/Los_Angeles"
                preferences:
                  type: object
                  properties:
                    theme:
                      type: string
                      enum: [light, dark, auto]
                      example: "dark"
                    audioPlaybackSpeed:
                      type: number
                      minimum: 0.5
                      maximum: 2.0
                      example: 1.5
                    fontSize:
                      type: string
                      enum: [small, medium, large, xl]
                      example: "large"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"
                  updated:
                    type: object
                    properties:
                      profile:
                        type: boolean
                      preferences:
                        type: boolean
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized

  /api/user/profile/image:
    post:
      tags:
        - User Profile
      summary: Upload user profile image
      description: Upload and set user profile image (JPEG/PNG, max 5MB)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Profile image file (JPEG/PNG, max 5MB, recommended 512x512px)
              required:
                - image
      responses:
        '200':
          description: Profile image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      imageUrl:
                        type: string
                        format: uri
                        example: "https://audiobook-dev.sunny250486.workers.dev/api/assets/profile-images/user_123_1704108600.jpg"
        '400':
          description: Invalid file type or missing file
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid file type. Only JPEG and PNG images are allowed."
        '413':
          description: File too large
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Profile image too large. Maximum size is 5MB."
                  error_code:
                    type: string
                    example: "FILE_TOO_LARGE"
        '401':
          description: Unauthorized

  # User Statistics
  /api/user/statistics:
    get:
      tags:
        - User Statistics
      summary: Get user reading statistics and achievements
      description: Returns comprehensive reading statistics and achievement data
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Reading statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserStatistics'
        '401':
          description: Unauthorized

  # User Progress Tracking
  /api/user/progress:
    get:
      tags:
        - User Progress
      summary: Get user reading progress
      description: Returns reading progress across all stories
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Progress data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        storyId:
                          type: string
                        chapterId:
                          type: string
                        progressPercent:
                          type: number
                        lastAccessed:
                          type: string
                          format: date-time

  # User Bookmarks
  /api/user/bookmarks:
    get:
      tags:
        - User Bookmarks
      summary: Get user bookmarks
      description: Returns user's saved bookmarks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Bookmarks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  bookmarks:
                    type: array
                    items:
                      type: object

  # User Sync
  /api/user/sync:
    post:
      tags:
        - User Sync
      summary: Sync user data across devices
      description: Synchronize user progress and settings across devices
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sync completed successfully

  # Support System
  /api/support/faqs:
    get:
      tags:
        - Support
      summary: Get frequently asked questions
      description: Returns FAQ list with optional filtering by category and language
      parameters:
        - name: category
          in: query
          required: false
          schema:
            type: string
            enum: [general, technical, customization]
          description: Filter FAQs by category
        - name: language
          in: query
          required: false
          schema:
            type: string
            default: "en"
          description: FAQ language (default: en)
      responses:
        '200':
          description: FAQs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FAQ'
        '500':
          description: Internal server error

  # Asset Management
  /api/assets/profile-images/{filename}:
    get:
      tags:
        - Assets
      summary: Serve profile images
      description: Serves profile images from R2 storage with proper caching headers
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Profile image filename
          example: "user_123_1704108600.jpg"
      responses:
        '200':
          description: Profile image served successfully
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
          headers:
            Cache-Control:
              schema:
                type: string
                example: "public, max-age=31536000"
              description: Cache for 1 year
            ETag:
              schema:
                type: string
              description: Entity tag for caching
            Last-Modified:
              schema:
                type: string
              description: Last modification date
        '404':
          description: Profile image not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Profile image not found"

  # Search Endpoints
  /api/search:
    get:
      tags:
        - Search
      summary: Search stories and content
      description: Search across stories, authors, and content with pagination
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query (minimum 2 characters)
        - name: language
          in: query
          schema:
            type: string
          description: Language filter for search results
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 50
          description: Maximum number of results per page
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Number of results to skip for pagination
      responses:
        '200':
          description: Search results with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  stories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Story'
                  total:
                    type: integer
                    description: Total number of matching results
                  query:
                    type: string
                    description: The search query used
                  limit:
                    type: integer
                    description: Results limit used
                  offset:
                    type: integer
                    description: Results offset used

  /api/search/suggestions:
    get:
      tags:
        - Search
      summary: Get search suggestions
      description: Get autocomplete suggestions for search queries
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query (minimum 2 characters)
        - name: limit
          in: query
          schema:
            type: integer
            default: 5
            maximum: 10
          description: Maximum number of suggestions
      responses:
        '200':
          description: Search suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                          description: The suggestion text
                        id:
                          type: string
                          description: ID for story suggestions
                        type:
                          type: string
                          enum: [story, author, genre]
                          description: Type of suggestion

  # Random Story Suggestion
  /api/surprise-me:
    get:
      tags:
        - Discovery
      summary: Get random story suggestion
      description: Returns a random story recommendation based on user reading history
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          description: User ID for personalized recommendations
        - name: language
          in: query
          schema:
            type: string
            default: "en"
          description: Preferred language for story suggestions
        - name: genre
          in: query
          schema:
            type: string
          description: Optional genre filter for suggestions
      responses:
        '200':
          description: Random story suggestion with personalization details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    description: Descriptive message about the suggestion
                  suggestion:
                    allOf:
                      - $ref: '#/components/schemas/Story'
                      - type: object
                        properties:
                          isReread:
                            type: boolean
                            description: Whether this story was previously read
                          reason:
                            type: string
                            enum: [unread_match, fallback_random]
                            description: Reason for this suggestion
        '400':
          description: Bad request - missing userId parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/surprise-me/preferences:
    get:
      tags:
        - Discovery
      summary: Get personalized story suggestion
      description: Returns a story recommendation based on user reading preferences and history
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          description: User ID for personalized recommendations
        - name: language
          in: query
          schema:
            type: string
            default: "en"
          description: Preferred language for story suggestions
      responses:
        '200':
          description: Personalized story suggestion with user preferences
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    description: Descriptive message about the suggestion
                  suggestion:
                    allOf:
                      - $ref: '#/components/schemas/Story'
                      - type: object
                        properties:
                          isReread:
                            type: boolean
                            description: Whether this story was previously read
                          reason:
                            type: string
                            enum: [preference_match, unread_fallback]
                            description: Reason for this suggestion
                          matchedPreferences:
                            type: array
                            items:
                              type: string
                            description: User preferences that matched this suggestion
                  userPreferences:
                    type: object
                    properties:
                      preferredGenres:
                        type: array
                        items:
                          type: string
                        description: User's preferred genres based on reading history
                      language:
                        type: string
                        description: Preferred language setting
        '400':
          description: Bad request - missing userId parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No unread stories found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Database Migration Tools
  /api/migrate:
    post:
      tags:
        - Administration
      summary: Execute database migrations
      description: Execute pending database migrations (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Migration completed successfully
        '403':
          description: Insufficient permissions

  # Billing Endpoints (Dodo Payments Integration)
  /api/billing/plans:
    get:
      tags:
        - Billing
      summary: Get subscription plans
      description: Returns available subscription plans with A/B testing and localization support
      security:
        - BearerAuth: []
      parameters:
        - name: country
          in: header
          schema:
            type: string
            example: US
          description: Country code for localized pricing (automatically detected via cf-ipcountry)
      responses:
        '200':
          description: List of available subscription plans
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: Rate limit per minute
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: Remaining requests in window
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubscriptionPlan'
              example:
                plans:
                  - planId: monthly_premium
                    displayName: Monthly Premium
                    priceText: $9.99/month
                    currency: USD
                    interval: month
                    features:
                      - Unlimited story access
                      - Offline listening
                      - Ad-free experience
                    trialDays: 7
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /api/billing/checkout-link:
    post:
      tags:
        - Billing
      summary: Create checkout session
      description: Creates a secure checkout session for subscription purchase
      security:
        - BearerAuth: []
      parameters:
        - name: app-version
          in: header
          schema:
            type: string
          description: Mobile app version for analytics
        - name: platform
          in: header
          schema:
            type: string
            enum: [ios, android, web]
          description: Platform for compliance handling
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - planId
              properties:
                planId:
                  type: string
                  example: monthly_premium
                  description: Selected subscription plan ID
            example:
              planId: monthly_premium
      responses:
        '200':
          description: Checkout session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSession'
              example:
                checkoutUrl: https://checkout.dodopayments.com/session_abc123
                checkoutSessionId: cs_abc123
                expiresAt: '2024-01-01T12:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: User already has active subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingError'
              example:
                error: conflict
                message: User already has an active subscription
                code: EXISTING_SUBSCRIPTION
        '429':
          $ref: '#/components/responses/RateLimitError'

  /api/billing/verify-payment:
    post:
      tags:
        - Billing
      summary: Verify payment completion
      description: Verifies payment status and syncs subscription entitlement
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - checkoutSessionId
              properties:
                checkoutSessionId:
                  type: string
                  description: Checkout session ID to verify
            example:
              checkoutSessionId: cs_abc123
      responses:
        '200':
          description: Payment verification completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  entitlement:
                    $ref: '#/components/schemas/Entitlement'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Checkout session not found or not owned by user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingError'

  /api/billing/subscription:
    get:
      tags:
        - Billing
      summary: Get subscription status
      description: Returns current subscription entitlement with grace period details
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current subscription entitlement
          content:
            application/json:
              schema:
                type: object
                properties:
                  entitlement:
                    $ref: '#/components/schemas/Entitlement'
              example:
                entitlement:
                  active: true
                  status: active
                  planId: monthly_premium
                  currentPeriodEnd: '2024-02-01T00:00:00Z'
                  cancelAtPeriodEnd: false
                  isInGracePeriod: false
                  amount: 999
                  currency: USD
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/billing/cancel:
    post:
      tags:
        - Billing
      summary: Cancel subscription
      description: Cancels subscription at the end of current billing period
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Subscription cancellation scheduled
          content:
            application/json:
              schema:
                type: object
                properties:
                  entitlement:
                    $ref: '#/components/schemas/Entitlement'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No active subscription found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingError'

  /api/billing/portal-link:
    post:
      tags:
        - Billing
      summary: Create customer portal link
      description: Creates secure link to customer billing portal for subscription management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Portal link created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                    description: Secure portal URL
                example:
                  url: https://portal.dodopayments.com/session_def456
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No customer record found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingError'

  /api/billing/reconciliation/manual:
    post:
      tags:
        - Admin
      summary: Trigger manual reconciliation
      description: Manually trigger reconciliation for specific entity (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - entityType
                - entityId
              properties:
                entityType:
                  type: string
                  enum: [subscription, user]
                  description: Type of entity to reconcile
                entityId:
                  type: string
                  description: ID of entity to reconcile
      responses:
        '200':
          description: Reconciliation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    description: Reconciliation results
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingError'

  # Webhook Endpoints
  /api/webhooks/dodo:
    post:
      tags:
        - Webhooks
      summary: Dodo Payments webhook
      description: Webhook endpoint for processing Dodo Payments events
      parameters:
        - name: dodo-signature
          in: header
          required: true
          schema:
            type: string
          description: HMAC signature for webhook verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Webhook event payload
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid signature or payload

  # Test Endpoints (Development only)
  /api/test-image:
    get:
      tags:
        - Testing
      summary: Test image serving
      description: Test endpoint for debugging image delivery
      responses:
        '200':
          description: Test image
          content:
            image/webp:
              schema:
                type: string
                format: binary

  /api/pixel-image:
    get:
      tags:
        - Testing
      summary: Get pixel test image
      description: Returns a 1x1 pixel test image
      responses:
        '200':
          description: Pixel image
          content:
            image/jpeg:
              schema:
                type: string
                format: binary

  /api/list-r2:
    get:
      tags:
        - Testing
      summary: List R2 bucket contents
      description: Lists all objects in the R2 storage bucket
      responses:
        '200':
          description: R2 bucket contents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  objects:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        size:
                          type: number
                        uploaded:
                          type: string
                          format: date-time

  # Billing Endpoints
  # Reviews Endpoints
  /api/reviews:
    post:
      tags:
        - Reviews
      summary: Submit a book review
      description: |
        Submit a review for a book with separate ratings for content and audio quality.
        User must have read at least 50% of the book and can only review each book once.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitReviewRequest'
      responses:
        '201':
          description: Review submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review submitted successfully"
                  reviewId:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Not eligible to review (insufficient progress or already reviewed)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Must complete at least 50% of the story to review"
        '404':
          description: Story not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Story not found"

  /api/reviews/story/{storyId}:
    get:
      tags:
        - Reviews
      summary: Get reviews for a story
      description: Retrieve paginated reviews for a specific story
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: The story ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Number of reviews per page
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsResponse'

  /api/reviews/story/{storyId}/ratings:
    get:
      tags:
        - Reviews
      summary: Get aggregated ratings for a story
      description: Get average ratings and distribution for content and audio quality
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: The story ID
      responses:
        '200':
          description: Ratings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryRatingsResponse'
        '404':
          description: Story not found

  /api/reviews/eligibility/{storyId}:
    get:
      tags:
        - Reviews
      summary: Check review eligibility
      description: Check if current user is eligible to review a specific story
      security:
        - BearerAuth: []
      parameters:
        - name: storyId
          in: path
          required: true
          schema:
            type: string
          description: The story ID
      responses:
        '200':
          description: Eligibility check result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewEligibilityResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Story not found

  /api/reviews/user/{userId}:
    get:
      tags:
        - Reviews
      summary: Get reviews by user
      description: Retrieve paginated reviews submitted by a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Number of reviews per page
      responses:
        '200':
          description: User reviews retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReviewsResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's display name
        picture:
          type: string
          format: uri
          description: URL to user's profile picture
        provider:
          type: string
          description: Authentication provider (e.g., 'auth0')
        created_at:
          type: string
          format: date-time

    UserProfile:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
          description: Unique user identifier
          example: "user_123"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        name:
          type: string
          description: User's display name
          example: "John Doe"
        bio:
          type: string
          description: User's biography
          example: "Book lover and storyteller"
        picture:
          type: string
          format: uri
          description: URL to user's profile picture
          example: "https://audiobook-dev.sunny250486.workers.dev/api/assets/profile-images/user_123_1704108600.jpg"
        defaultLanguage:
          type: string
          description: User's default language preference
          example: "en"
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          description: Last login timestamp
          example: "2024-01-15T10:30:00Z"
        totalReadingTime:
          type: integer
          description: Total reading time in seconds
          example: 7200
        storiesCompleted:
          type: integer
          description: Number of stories completed
          example: 15
        preferredLanguage:
          type: string
          description: User's preferred reading language
          example: "en"
        timezone:
          type: string
          description: User's timezone
          example: "America/New_York"
        subscriptionTier:
          type: string
          enum: [free, premium]
          description: User's subscription tier
          example: "premium"
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2023-06-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last profile update timestamp
          example: "2024-01-15T10:30:00Z"

    UserPreferences:
      type: object
      required:
        - userId
        - version
        - needsSync
      properties:
        userId:
          type: string
          description: User identifier
          example: "user_123"
        version:
          type: integer
          description: Preferences version for sync
          example: 1
        needsSync:
          type: boolean
          description: Whether preferences need syncing
          example: false
        defaultLanguage:
          type: string
          description: Default language preference
          example: "en"
        preferredReadingMode:
          type: string
          enum: [read, listen, mixed]
          description: Preferred reading mode
          example: "read"
        fontSize:
          type: string
          enum: [small, medium, large, xl]
          description: Font size preference
          example: "medium"
        fontFamily:
          type: string
          enum: [system, serif, sans-serif, dyslexic]
          description: Font family preference
          example: "system"
        lineHeight:
          type: number
          description: Line height preference
          example: 1.6
        theme:
          type: string
          enum: [light, dark, auto, sepia]
          description: Theme preference
          example: "auto"
        audioPlaybackSpeed:
          type: number
          minimum: 0.5
          maximum: 2.0
          description: Audio playback speed
          example: 1.0
        autoPlayNextChapter:
          type: boolean
          description: Auto-play next chapter
          example: true
        backgroundAudio:
          type: boolean
          description: Allow background audio
          example: false
        skipSilence:
          type: boolean
          description: Skip silence in audio
          example: false
        pageTurnAnimation:
          type: boolean
          description: Enable page turn animations
          example: true
        readingProgressIndicator:
          type: boolean
          description: Show reading progress indicator
          example: true
        chapterCompletionCelebration:
          type: boolean
          description: Show chapter completion celebrations
          example: true
        syncEnabled:
          type: boolean
          description: Enable cross-device sync
          example: true
        offlineSync:
          type: boolean
          description: Enable offline sync
          example: true
        wifiOnlySync:
          type: boolean
          description: Sync only on WiFi
          example: false
        syncFrequency:
          type: string
          enum: [immediate, every_5min, manual]
          description: Sync frequency
          example: "immediate"
        readingReminders:
          type: boolean
          description: Enable reading reminders
          example: false
        reminderTime:
          type: string
          pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
          description: Reminder time in HH:MM format
          example: "19:00"
        reminderDays:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 6
          description: Days for reminders (0=Sunday)
          example: [1, 2, 3, 4, 5]
        newContentNotifications:
          type: boolean
          description: Enable new content notifications
          example: true
        achievementNotifications:
          type: boolean
          description: Enable achievement notifications
          example: true
        bookmarkNotifications:
          type: boolean
          description: Enable bookmark notifications
          example: true
        analyticsEnabled:
          type: boolean
          description: Enable analytics
          example: true
        shareReadingProgress:
          type: boolean
          description: Share reading progress
          example: false
        highContrast:
          type: boolean
          description: Enable high contrast mode
          example: false
        reduceMotion:
          type: boolean
          description: Reduce motion for accessibility
          example: false
        screenReaderOptimized:
          type: boolean
          description: Optimize for screen readers
          example: false
        updatedAt:
          type: string
          format: date-time
          description: Last preferences update
          example: "2024-01-15T10:30:00Z"
        lastSyncedAt:
          type: string
          format: date-time
          nullable: true
          description: Last sync timestamp
          example: "2024-01-15T10:30:00Z"

    UserStatistics:
      type: object
      required:
        - books_read
        - total_reading_time_minutes
        - current_streak_days
        - longest_streak_days
        - chapters_completed
        - favorite_genre
        - reading_sessions
        - average_session_time_minutes
        - achievements
      properties:
        books_read:
          type: integer
          description: Number of books/stories completed
          example: 12
        total_reading_time_minutes:
          type: integer
          description: Total reading time in minutes
          example: 1440
        current_streak_days:
          type: integer
          description: Current consecutive reading days
          example: 7
        longest_streak_days:
          type: integer
          description: Longest reading streak achieved
          example: 21
        chapters_completed:
          type: integer
          description: Total chapters completed
          example: 156
        favorite_genre:
          type: string
          description: Most read genre
          example: "Fantasy"
        reading_sessions:
          type: integer
          description: Total reading sessions
          example: 89
        average_session_time_minutes:
          type: integer
          description: Average session duration in minutes
          example: 16
        last_reading_date:
          type: string
          format: date-time
          nullable: true
          description: Last reading activity
          example: "2024-01-15T22:30:00Z"
        achievements:
          type: array
          items:
            $ref: '#/components/schemas/UserAchievement'
          description: User achievements

    UserAchievement:
      type: object
      required:
        - id
        - name
        - description
        - earned_at
      properties:
        id:
          type: string
          description: Achievement identifier
          example: "first_book"
        name:
          type: string
          description: Achievement name
          example: "First Chapter"
        description:
          type: string
          description: Achievement description
          example: "Complete your first chapter"
        earned_at:
          type: string
          format: date-time
          description: When the achievement was earned
          example: "2023-06-01T15:00:00Z"

    FAQ:
      type: object
      required:
        - id
        - question
        - answer
        - category
        - order
      properties:
        id:
          type: string
          description: FAQ identifier
          example: "faq_001"
        question:
          type: string
          description: FAQ question
          example: "How do I download stories for offline reading?"
        answer:
          type: string
          description: FAQ answer
          example: "To download stories for offline reading, tap the download icon on any story. You can manage your downloads in the Library section under 'Downloaded'."
        category:
          type: string
          enum: [general, technical, customization]
          description: FAQ category
          example: "general"
        order:
          type: integer
          description: Display order
          example: 1

    Story:
      type: object
      properties:
        id:
          type: string
          description: Unique story identifier
        title:
          type: string
          description: Story title
        author:
          type: string
          description: Story author
        description:
          type: string
          description: Story description
        genre:
          type: string
          description: Story genre
        tags:
          type: array
          items:
            type: string
          description: Story tags
        origin_language:
          type: string
          description: Primary language of the story
        language2:
          type: array
          items:
            type: string
          description: Additional supported languages
        total_chapters:
          type: integer
          description: Total number of chapters
        length:
          type: integer
          description: Story length in words
        reading_time:
          type: integer
          description: Estimated reading time in minutes
        thumbnail_url:
          type: string
          format: uri
          description: URL to story thumbnail
        cover_image_url:
          type: string
          format: uri
          description: URL to story cover image
        status:
          type: string
          enum: [draft, published, archived]
          description: Story publication status
        created_by:
          type: string
          description: ID of user who created the story
        created_at:
          type: string
          format: date-time
          description: Story creation timestamp

    CreateStoryRequest:
      type: object
      required:
        - title
        - origin_language
      properties:
        id:
          type: string
          description: Optional custom ID (will be generated if not provided)
        title:
          type: string
          minLength: 1
          description: Story title
        author:
          type: string
          description: Story author
        description:
          type: string
          description: Story description
        genre:
          type: string
          description: Story genre
        tags:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Story tags (array or JSON string)
        origin_language:
          type: string
          minLength: 2
          description: Primary language code
        language2:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Additional supported languages
        total_chapters:
          type: integer
          minimum: 1
          description: Total number of chapters
        length:
          type: integer
          minimum: 1
          description: Story length in words
        reading_time:
          type: integer
          minimum: 1
          description: Estimated reading time in minutes
        thumbnail_url:
          type: string
          format: uri
          description: URL to story thumbnail
        cover_image_url:
          type: string
          format: uri
          description: URL to story cover image
        status:
          type: string
          enum: [draft, published, archived]
          description: Story publication status

    StoryMetadata:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        description:
          type: string
        chapters:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              duration:
                type: number
        assets:
          type: object
          properties:
            images:
              type: array
              items:
                type: string
            audio:
              type: array
              items:
                type: string

    CompleteStoryMetadata:
      type: object
      description: Enhanced story metadata with complete content blocks and assets
      required:
        - id
        - title
        - author
        - description
        - chapters
        - contentStats
        - assets
      properties:
        id:
          type: string
          description: Unique story identifier
          example: "secrets-of-the-timeless-archive"
        title:
          type: string
          description: Story title from metadata.title
          example: "Secrets of the Timeless Archive"
        author:
          type: string
          description: Story author
          example: "AI Story Generator"
        description:
          type: string
          description: Complete story description from metadata.description
          example: "The story's greatest strengths are its perfect adherence to the prompt and its compelling character work..."
        genre:
          type: string
          description: Story genre
          example: "Sci-Fi"
        originLanguage:
          type: string
          description: Primary language code
          example: "en"
        supportedLanguages:
          type: array
          items:
            type: string
          description: Supported languages
          example: ["en"]
        totalChapters:
          type: integer
          description: Total number of chapters
          example: 8
        readingTime:
          type: integer
          description: Estimated reading time in minutes
          example: 40
        tags:
          type: array
          items:
            type: string
          description: Story tags
          example: ["adventure", "steampunk", "mystery"]
        status:
          type: string
          description: Publication status
          example: "published"
        created:
          type: string
          format: date-time
          description: Creation timestamp
        chapters:
          type: array
          items:
            $ref: '#/components/schemas/CompleteChapterMetadata'
          description: Complete chapter data with content blocks
        contentStats:
          $ref: '#/components/schemas/ContentStats'
        assets:
          type: object
          properties:
            images:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/AssetInfo'
              description: Image assets indexed by asset ID
        styleGuide:
          type: object
          properties:
            theme:
              type: string
              example: "narrative"
            colorPalette:
              type: array
              items:
                type: string
              example: []
            imageStyle:
              type: string
              example: "photorealistic"
            mood:
              type: string
              example: "engaging"

    CompleteChapterMetadata:
      type: object
      description: Complete chapter data with content blocks
      required:
        - id
        - title
        - chapterNumber
        - blocks
      properties:
        id:
          type: string
          description: Unique chapter identifier
          example: "chapter_0d4fa6af"
        title:
          type: string
          description: Chapter title
          example: "Whispers in the Archives"
        chapterNumber:
          type: integer
          description: Chapter number
          example: 1
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/ContentBlock'
          description: Complete content blocks array with text, images, audio
        duration:
          type: number
          description: Chapter audio duration in seconds
          example: 655.091
        audioUrl:
          type: string
          description: Chapter audio URL
          example: "/api/content/secrets-of-the-timeless-archive/audio/en/chapter_01_Whispers_in_the_Archives.mp3"

    ContentStats:
      type: object
      description: Content statistics for the story
      required:
        - totalBlocks
        - totalChapters
        - totalImages
        - hasAudio
        - hasImages
      properties:
        totalBlocks:
          type: integer
          description: Total number of content blocks across all chapters
          example: 355
        totalChapters:
          type: integer
          description: Total number of chapters
          example: 8
        totalImages:
          type: integer
          description: Total number of image assets
          example: 16
        totalAudioBlocks:
          type: integer
          description: Total number of audio content blocks
          example: 8
        totalTextBlocks:
          type: integer
          description: Total number of text/paragraph blocks
          example: 331
        hasAudio:
          type: boolean
          description: Whether story includes audio content
          example: true
        hasImages:
          type: boolean
          description: Whether story includes image content
          example: true
        contentTypes:
          type: array
          items:
            type: string
          description: Types of content blocks present
          example: ["heading_2", "paragraph", "image", "audio"]

    AssetInfo:
      type: object
      description: Asset information with URL and metadata
      required:
        - id
        - filename
        - url
      properties:
        id:
          type: string
          description: Unique asset identifier
          example: "chapter1_img01"
        filename:
          type: string
          description: Asset filename
          example: "chapter1_img01.webp"
        url:
          type: string
          description: Full asset URL
          example: "/api/content/story-id/image/en/chapter1_img01.webp"
        metadata:
          type: object
          properties:
            description:
              type: string
              description: Asset description
              example: "Scene illustration for chapter 1"
            placement:
              type: string
              enum: [inline, background, overlay]
              description: Asset placement preference
              example: "inline"
            category:
              type: string
              enum: [cover, thumbnail, chapter, scene, character]
              description: Asset category
              example: "chapter"

    ChapterContent:
      type: object
      description: Enhanced chapter content with content blocks
      required:
        - id
        - title
        - blocks
      properties:
        id:
          type: string
          description: Unique chapter identifier
          example: "chapter1"
        title:
          type: string
          description: Chapter title
          example: "The Adventure Begins"
        chapterNumber:
          type: integer
          description: Chapter number
          example: 1
        blocks:
          type: array
          description: Content blocks containing text, images, audio, etc.
          items:
            $ref: '#/components/schemas/ContentBlock'
        duration:
          type: number
          description: Optional chapter duration in seconds
          example: 1800.5
        audioUrl:
          type: string
          description: Optional audio URL for chapter narration
          example: "/api/content/story-id/audio/en/chapter1_narration.mp3"

    ContentBlock:
      type: object
      description: Individual content block within a chapter
      required:
        - id
        - type
        - content
      properties:
        id:
          type: string
          description: Unique block identifier
          example: "block_123"
        type:
          type: string
          enum: [text, paragraph, heading_1, heading_2, heading_3, image, quote, audio]
          description: Type of content block
          example: "image"
        order:
          type: integer
          description: Display order within chapter
          example: 2
        content:
          type: object
          description: Block content (varies by type)
          properties:
            text:
              type: string
              description: Text content for text-based blocks
              example: "Once upon a time, in a mysterious forest..."
            url:
              type: string
              description: URL for media blocks (images, audio)
              example: "/api/content/story-id/image/en/chapter1_scene1.jpg"
            description:
              type: string
              description: Description, alt text, or caption
              example: "A mystical forest path shrouded in morning mist"
            author:
              type: string
              description: Author for quote blocks
              example: "J.R.R. Tolkien"
            placement:
              type: string
              enum: [inline, background, overlay]
              description: How images should be displayed
              example: "inline"
        metadata:
          type: object
          description: Optional metadata for the block
          example:
            position: "center"
            style: "bordered"

    FeedbackRequest:
      type: object
      required:
        - user_id
        - rating
      properties:
        user_id:
          type: string
          minLength: 1
          description: ID of the user submitting feedback
        rating:
          type: integer
          enum: [1, -1]
          description: Rating (1 for thumbs up, -1 for thumbs down)
        comment:
          type: string
          maxLength: 500
          description: Optional comment

    Bookmark:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        story_id:
          type: string
        story:
          $ref: '#/components/schemas/Story'
        created_at:
          type: string
          format: date-time

    RecentActivity:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        story_id:
          type: string
        story:
          $ref: '#/components/schemas/Story'
        last_position:
          type: integer
          description: Last position in the story (seconds for audio, characters for text)
        updated_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        message:
          type: string
          description: Detailed error description
        code:
          type: string
          description: Error code

    # User Session Schemas
    ReadingSession:
      type: object
      properties:
        id:
          type: string
          description: Unique session identifier
        story_id:
          type: string
          description: Story ID
        story_title:
          type: string
          description: Story title
        language:
          type: string
          description: Language code
        platform:
          type: string
          enum: [web, mobile, tablet]
          description: Platform used
        reading_mode:
          type: string
          enum: [read, listen]
          description: Reading mode
        start_chapter:
          type: integer
          description: Starting chapter
        start_progress:
          type: number
          description: Starting progress in chapter (0.0-1.0)
        end_chapter:
          type: integer
          description: Ending chapter
        end_progress:
          type: number
          description: Ending progress in chapter (0.0-1.0)
        total_listen_time:
          type: integer
          description: Total listening time in seconds
        session_start:
          type: string
          format: date-time
          description: Session start timestamp
        session_end:
          type: string
          format: date-time
          description: Session end timestamp
        duration_seconds:
          type: integer
          description: Total session duration in seconds

    StartSessionRequest:
      type: object
      required:
        - story_id
        - language
        - platform
        - reading_mode
        - start_chapter
        - start_progress
      properties:
        story_id:
          type: string
          description: Story identifier
        language:
          type: string
          description: Language code (e.g., 'en', 'es')
        platform:
          type: string
          enum: [web, mobile, tablet]
          description: Platform being used
        reading_mode:
          type: string
          enum: [read, listen]
          description: Reading mode
        start_chapter:
          type: integer
          minimum: 1
          description: Starting chapter number
        start_progress:
          type: number
          minimum: 0
          maximum: 1
          description: Starting progress in chapter (0.0-1.0)
        start_audio_position:
          type: number
          description: Starting audio position in seconds
        device_info:
          type: object
          description: Optional device information
          properties:
            user_agent:
              type: string
            screen_resolution:
              type: string
            device_type:
              type: string
            os:
              type: string
            browser:
              type: string

    CompletedSessionRequest:
      type: object
      required:
        - storyId
        - sessionStart
        - readingMode
      properties:
        storyId:
          type: string
          description: Story identifier (mobile format)
        sessionStart:
          type: string
          format: date-time
          description: Session start timestamp
        sessionEnd:
          type: string
          format: date-time
          description: Session end timestamp
        duration:
          type: integer
          description: Session duration in seconds
        readingMode:
          type: string
          enum: [text, audio]
          description: Reading mode (mobile format)
        language:
          type: string
          description: Language code (optional, defaults to 'en')
        platform:
          type: string
          description: Platform (optional, defaults to 'mobile')
        startChapter:
          type: integer
          description: Starting chapter (optional)
        endChapter:
          type: integer
          description: Ending chapter (optional)

    UpdateSessionRequest:
      type: object
      required:
        - current_chapter
        - current_progress
      properties:
        current_chapter:
          type: integer
          minimum: 1
          description: Current chapter number
        current_progress:
          type: number
          minimum: 0
          maximum: 1
          description: Current progress in chapter (0.0-1.0)
        current_audio_position:
          type: number
          description: Current audio position in seconds
        actions_taken:
          type: array
          description: Actions performed during session
          items:
            type: object
            properties:
              type:
                type: string
                enum: [bookmark_created, chapter_completed, audio_seeked]
              timestamp:
                type: string
                format: date-time
              data:
                type: object

    EndSessionRequest:
      type: object
      required:
        - end_chapter
        - end_progress
      properties:
        end_chapter:
          type: integer
          description: Final chapter reached
        end_progress:
          type: number
          minimum: 0
          maximum: 1
          description: Final progress in chapter (0.0-1.0)
        end_audio_position:
          type: number
          description: Final audio position in seconds
        total_listen_time:
          type: integer
          description: Total listening time in seconds
        session_quality:
          type: string
          enum: [completed, interrupted, background]
          description: How the session ended

    SessionAnalytics:
      type: object
      properties:
        total_reading_time:
          type: integer
          description: Total reading time in minutes
        average_session_duration:
          type: integer
          description: Average session duration in minutes
        favorite_reading_mode:
          type: string
          enum: [read, listen]
          description: Most frequently used reading mode
        most_active_platform:
          type: string
          enum: [web, mobile, tablet]
          description: Most frequently used platform
        reading_streak:
          type: object
          properties:
            current:
              type: integer
              description: Current consecutive reading days
            longest:
              type: integer
              description: Longest reading streak achieved

    Achievement:
      type: object
      properties:
        type:
          type: string
          enum: [long_session, chapter_marathon, reading_streak]
          description: Type of achievement
        title:
          type: string
          description: Achievement title
        description:
          type: string
          description: Achievement description

    ProgressSummary:
      type: object
      properties:
        chapters_read:
          type: integer
          description: Number of chapters completed in session
        time_spent:
          type: integer
          description: Time spent reading in minutes
        progress_made:
          type: number
          description: Progress made in story (0.0-1.0)

    # Billing Schemas (Dodo Payments Integration)
    SubscriptionPlan:
      type: object
      properties:
        planId:
          type: string
          description: Unique plan identifier
          example: monthly_premium
        displayName:
          type: string
          description: Human-readable plan name
          example: Monthly Premium
        priceText:
          type: string
          description: Formatted price for display
          example: $9.99/month
        currency:
          type: string
          description: Currency code
          example: USD
        interval:
          type: string
          enum: [month, year]
          description: Billing interval
        features:
          type: array
          items:
            type: string
          description: List of plan features
          example:
            - Unlimited story access
            - Offline listening
            - Ad-free experience
        trialDays:
          type: integer
          nullable: true
          description: Free trial period in days
          example: 7
        amount:
          type: integer
          description: Price in minor currency units (cents)
          example: 999
        specialOffer:
          type: object
          nullable: true
          description: Special promotional offer details
          properties:
            discountAmount:
              type: integer
              description: Discount in minor currency units
            extendedTrial:
              type: integer
              description: Extended trial period in days
            message:
              type: string
              description: Promotional message

    CheckoutSession:
      type: object
      properties:
        checkoutUrl:
          type: string
          format: uri
          description: URL for checkout process
          example: https://checkout.dodopayments.com/session_abc123
        checkoutSessionId:
          type: string
          description: Unique checkout session identifier
          example: cs_abc123
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: Checkout session expiration time
          example: '2024-01-01T12:30:00Z'

    Entitlement:
      type: object
      properties:
        active:
          type: boolean
          description: Whether subscription is active
          example: true
        status:
          type: string
          enum: [free, active, canceled, expired, past_due, trialing]
          description: Subscription status
          example: active
        planId:
          type: string
          nullable: true
          description: Current plan identifier
          example: monthly_premium
        currentPeriodEnd:
          type: string
          format: date-time
          nullable: true
          description: End of current billing period
          example: '2024-02-01T00:00:00Z'
        trialEnd:
          type: string
          format: date-time
          nullable: true
          description: End of trial period
          example: '2024-01-08T00:00:00Z'
        cancelAtPeriodEnd:
          type: boolean
          description: Whether subscription is set to cancel at period end
          example: false
        isInGracePeriod:
          type: boolean
          description: Whether subscription is in payment failure grace period
          example: false
        gracePeriodDetails:
          $ref: '#/components/schemas/GracePeriodDetails'
          nullable: true
        amount:
          type: integer
          nullable: true
          description: Subscription amount in minor currency units
          example: 999
        currency:
          type: string
          nullable: true
          description: Subscription currency
          example: USD
        subscriptionAge:
          type: integer
          nullable: true
          description: Days since subscription started
          example: 45
        daysSinceLastPayment:
          type: integer
          nullable: true
          description: Days since last successful payment (for past_due subscriptions)
          example: 3

    GracePeriodDetails:
      type: object
      properties:
        daysRemaining:
          type: integer
          description: Days remaining in grace period
          example: 5
        graceEnd:
          type: string
          format: date-time
          description: Grace period end date
          example: '2024-01-15T00:00:00Z'
        requiresPaymentUpdate:
          type: boolean
          description: Whether payment method needs updating
          example: true
        gracePeriodMessage:
          type: string
          description: User-friendly message about grace period
          example: Payment failed. Access continues for 5 more days.

    BillingError:
      type: object
      properties:
        error:
          type: string
          description: Error type
          example: payment_failed
        message:
          type: string
          description: Human-readable error message
          example: Payment could not be processed
        code:
          type: string
          description: Error code for client handling
          example: CARD_DECLINED
        details:
          type: object
          nullable: true
          description: Additional error details
        retryable:
          type: boolean
          description: Whether the operation can be retried
          example: true

  responses:
    UnauthorizedError:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BillingError'
          example:
            error: unauthorized
            message: Authentication required
            code: INVALID_TOKEN
    
    BadRequestError:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BillingError'
          example:
            error: bad_request
            message: Invalid plan ID provided
            code: INVALID_PLAN
    
    RateLimitError:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Unix timestamp when rate limit resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BillingError'
          example:
            error: rate_limit_exceeded
            message: Too many requests, please try again later
            code: RATE_LIMIT

    # Billing Schemas
    SubscriptionPlan:
      type: object
      required:
        - id
        - name
        - description
        - amount
        - currency
        - interval
        - displayName
        - priceText
        - features
      properties:
        id:
          type: string
          example: neutale-monthly
        name:
          type: string
          example: monthly
        description:
          type: string
          example: Get unlimited access to all premium stories and features
        amount:
          type: integer
          description: Price in cents
          example: 999
        currency:
          type: string
          example: USD
        interval:
          type: string
          enum: [monthly, annual]
        displayName:
          type: string
          example: Monthly Premium
        priceText:
          type: string
          example: $9.99/month
        features:
          type: array
          items:
            type: string
          example:
            - Unlimited premium stories
            - High-quality audio narration
            - Offline reading
        popular:
          type: boolean
        trialDays:
          type: integer
          minimum: 0
        metadata:
          type: object

    Entitlement:
      type: object
      required:
        - hasAccess
        - accessType
        - features
      properties:
        hasAccess:
          type: boolean
        accessType:
          type: string
          enum: [free, trial, active, grace_period, expired]
        subscriptionId:
          type: string
        planId:
          type: string
        status:
          type: string
        currentPeriodStart:
          type: string
          format: date-time
        currentPeriodEnd:
          type: string
          format: date-time
        trialEnd:
          type: string
          format: date-time
        gracePeriod:
          $ref: '#/components/schemas/GracePeriodDetails'
        features:
          type: array
          items:
            type: string

    GracePeriodDetails:
      type: object
      required:
        - isInGracePeriod
      properties:
        isInGracePeriod:
          type: boolean
        gracePeriodEnd:
          type: string
          format: date-time
        daysRemaining:
          type: integer
          minimum: 0
        urgencyLevel:
          type: string
          enum: [low, medium, high]

    BillingError:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Payment processing failed
        errorCode:
          type: string
          enum:
            - AUTH_REQUIRED
            - INVALID_REQUEST
            - CHECKOUT_ERROR
            - VERIFICATION_ERROR
            - SUBSCRIPTION_ERROR
            - CANCEL_ERROR
            - PORTAL_ERROR
            - SESSION_NOT_FOUND
            - SESSION_EXPIRED
            - NO_SUBSCRIPTION
            - PAYMENT_PENDING
          example: CHECKOUT_ERROR
        data:
          type: object
          nullable: true

    # Progressive Upload System Schemas
    ProgressiveUploadInit:
      type: object
      required:
        - metadata
        - assets
      properties:
        metadata:
          $ref: '#/components/schemas/StoryMetadataUpload'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetManifest'
          minItems: 1
          description: List of assets to upload with the story
        totalExpectedSize:
          type: integer
          minimum: 1
          description: Optional total size of all assets in bytes

    StoryMetadataUpload:
      type: object
      required:
        - title
        - chapters
      properties:
        title:
          type: string
          minLength: 1
          description: Story title
        author:
          type: string
          default: "AI Story Generator"
          description: Story author
        description:
          type: string
          description: Story description
        genre:
          type: string
          description: Story genre
        tags:
          type: array
          items:
            type: string
          description: Story tags
        language:
          type: string
          default: "en"
          description: Primary language code
        chapters:
          type: array
          items:
            $ref: '#/components/schemas/ChapterUpload'
          minItems: 1
          description: Chapter content with visual blocks
        styleGuide:
          $ref: '#/components/schemas/StyleGuide'
        review:
          $ref: '#/components/schemas/StoryReview'

    ChapterUpload:
      type: object
      required:
        - id
        - title
        - chapterNumber
        - blocks
      properties:
        id:
          type: string
          description: Unique chapter identifier
        title:
          type: string
          description: Chapter title
        chapterNumber:
          type: integer
          minimum: 1
          description: Chapter number
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/ContentBlockUpload'
          description: Content blocks with text and image elements
        duration:
          type: number
          description: Optional audio duration in seconds
        audioUrl:
          type: string
          description: Optional audio URL reference

    ContentBlockUpload:
      type: object
      required:
        - id
        - type
        - order
        - content
      properties:
        id:
          type: string
          description: Unique block identifier
        type:
          type: string
          enum: [text, paragraph, heading_1, heading_2, heading_3, image, quote, audio]
          description: Block type
        order:
          type: integer
          minimum: 0
          description: Display order within chapter
        content:
          type: object
          description: Block content (varies by type)
          properties:
            text:
              type: string
              description: Text content for text blocks
            assetId:
              type: string
              description: Asset reference for image/audio blocks
            description:
              type: string
              description: Description or alt text
        metadata:
          type: object
          description: Optional metadata for the block

    AssetManifest:
      type: object
      required:
        - id
        - filename
        - type
        - expectedSize
      properties:
        id:
          type: string
          description: Unique asset identifier
        filename:
          type: string
          description: Asset filename
        type:
          type: string
          enum: [image, audio, video, document]
          description: Asset type
        category:
          type: string
          enum: [cover, thumbnail, chapter, scene, character]
          description: Asset category
        expectedSize:
          type: integer
          minimum: 1
          description: Expected file size in bytes
        description:
          type: string
          description: Asset description
        placement:
          type: string
          enum: [inline, background, overlay]
          description: How the asset should be displayed
        metadata:
          type: object
          description: Additional asset metadata

    StyleGuide:
      type: object
      properties:
        theme:
          type: string
          description: Visual theme
        colorPalette:
          type: array
          items:
            type: string
          description: Color palette for the story
        imageStyle:
          type: string
          description: Image style preference
        mood:
          type: string
          description: Overall mood/atmosphere

    StoryReview:
      type: object
      required:
        - overall_rating
        - final_rating
        - quality_achieved
      properties:
        overall_rating:
          type: number
          minimum: 0
          maximum: 100
          description: Overall quality rating
        verdict:
          type: string
          description: Quality verdict
        final_rating:
          type: number
          minimum: 0
          maximum: 100
          description: Final rating after review
        quality_achieved:
          type: boolean
          description: Whether quality standards were met

    ProgressiveUploadInitResponse:
      type: object
      required:
        - success
        - storyId
        - sessionId
        - status
        - uploadUrls
        - expiresAt
        - summary
        - endpoints
      properties:
        success:
          type: boolean
          example: true
        storyId:
          type: string
          description: Generated story identifier
          example: "story-title"
        sessionId:
          type: string
          description: Upload session identifier
          example: "session_abc123"
        status:
          type: string
          enum: [uploading]
          description: Initial session status
        uploadUrls:
          type: object
          additionalProperties:
            type: string
          description: Presigned URLs for direct asset uploads
          example:
            cover_image: "https://audiobook-dev.sunny250486.workers.dev/api/progressive-upload/upload/story-title/cover_image"
            ch1_scene1: "https://audiobook-dev.sunny250486.workers.dev/api/progressive-upload/upload/story-title/ch1_scene1"
        expiresAt:
          type: string
          format: date-time
          description: When the upload URLs expire
        summary:
          type: object
          properties:
            totalAssets:
              type: integer
              description: Total number of assets to upload
            totalSizeMB:
              type: string
              description: Total size in megabytes
            estimatedUploadTime:
              type: string
              description: Estimated upload time range
        assets:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              filename:
                type: string
              type:
                type: string
              expectedSize:
                type: integer
              uploadUrl:
                type: string
          description: Asset manifest with upload URLs
        endpoints:
          type: object
          properties:
            progress:
              type: string
              description: Progress monitoring endpoint
            finalize:
              type: string
              description: Story finalization endpoint
            cancel:
              type: string
              description: Upload cancellation endpoint

    ProgressiveUploadStatus:
      type: object
      required:
        - success
        - storyId
        - sessionId
        - status
        - progress
        - assets
      properties:
        success:
          type: boolean
          example: true
        storyId:
          type: string
          description: Story identifier
        sessionId:
          type: string
          description: Upload session identifier
        status:
          type: string
          enum: [initializing, uploading, processing, completed, failed, expired, cancelled]
          description: Current session status
        progress:
          $ref: '#/components/schemas/UploadProgress'
        session:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            expiresAt:
              type: string
              format: date-time
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetUploadStatus'
          description: Individual asset status

    UploadProgress:
      type: object
      required:
        - totalAssets
        - uploadedAssets
        - failedAssets
        - pendingAssets
        - percentage
      properties:
        totalAssets:
          type: integer
          description: Total number of assets
        uploadedAssets:
          type: integer
          description: Successfully uploaded assets
        failedAssets:
          type: integer
          description: Failed asset uploads
        pendingAssets:
          type: integer
          description: Assets still pending upload
        percentage:
          type: integer
          minimum: 0
          maximum: 100
          description: Overall upload percentage
        totalSizeMB:
          type: string
          description: Total size in megabytes
        uploadedSizeMB:
          type: string
          description: Uploaded size in megabytes

    AssetUploadStatus:
      type: object
      required:
        - id
        - filename
        - type
        - status
      properties:
        id:
          type: string
          description: Asset identifier
        filename:
          type: string
          description: Asset filename
        type:
          type: string
          description: Asset type
        status:
          type: string
          enum: [pending, uploading, completed, failed]
          description: Upload status
        expectedSize:
          type: integer
          description: Expected file size in bytes
        uploadedSize:
          type: integer
          description: Actually uploaded size in bytes
        percentage:
          type: integer
          minimum: 0
          maximum: 100
          description: Individual asset upload percentage
        uploadStarted:
          type: string
          format: date-time
          description: When upload started
        uploadCompleted:
          type: string
          format: date-time
          description: When upload completed
        error:
          type: string
          description: Error message if upload failed
        retryCount:
          type: integer
          description: Number of retry attempts

    AssetUploadResponse:
      type: object
      required:
        - success
        - assetId
        - filename
        - uploadedSize
        - status
      properties:
        success:
          type: boolean
          example: true
        assetId:
          type: string
          description: Asset identifier
        filename:
          type: string
          description: Uploaded filename
        uploadedSize:
          type: integer
          description: Size of uploaded file in bytes
        status:
          type: string
          enum: [completed]
          description: Upload completion status

    ProgressiveUploadFinalizeResponse:
      type: object
      required:
        - success
        - storyId
        - status
        - summary
        - urls
      properties:
        success:
          type: boolean
          example: true
        storyId:
          type: string
          description: Story identifier
        status:
          type: string
          enum: [published]
          description: Final story status
        summary:
          type: object
          properties:
            chaptersProcessed:
              type: integer
              description: Number of chapters processed
            assetsProcessed:
              type: integer
              description: Number of assets processed
            contentBlocks:
              type: integer
              description: Total content blocks created
            imageAssets:
              type: integer
              description: Number of image assets processed
        urls:
          type: object
          properties:
            story:
              type: string
              description: Story API endpoint
            metadata:
              type: string
              description: Story metadata endpoint
            cover:
              type: string
              description: Cover image URL
            thumbnail:
              type: string
              description: Thumbnail image URL
        chapters:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              number:
                type: integer
              title:
                type: string
              blocks:
                type: integer
                description: Number of content blocks
              key:
                type: string
                description: R2 storage key
          description: Processed chapter information

    ValidationError:
      type: object
      required:
        - error
        - details
      properties:
        error:
          type: string
          example: "Invalid request format"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field path that failed validation
              message:
                type: string
                description: Validation error message
          description: Detailed validation errors

    # Reviews Schemas
    SubmitReviewRequest:
      type: object
      required:
        - storyId
        - contentRating
      properties:
        storyId:
          type: string
          description: The story ID to review
          example: "story-123"
        contentRating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating for content quality (story, plot, characters)
          example: 4
        audioRating:
          type: integer
          minimum: 1
          maximum: 5
          description: Optional rating for audio quality (narration, sound effects)
          example: 5
        comment:
          type: string
          maxLength: 1000
          description: Optional review comment (max 1000 characters)
          example: "Great story with excellent narration!"

    ReviewsResponse:
      type: object
      properties:
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        total:
          type: integer
          description: Total number of reviews
          example: 45
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Number of reviews per page
          example: 10
        hasMore:
          type: boolean
          description: Whether there are more reviews available
          example: true

    Review:
      type: object
      properties:
        id:
          type: string
          description: Review ID
          example: "review-123"
        userName:
          type: string
          description: Display name of the reviewer
          example: "Sarah"
        contentRating:
          type: integer
          minimum: 1
          maximum: 5
          description: Content quality rating
          example: 4
        audioRating:
          type: integer
          minimum: 1
          maximum: 5
          nullable: true
          description: Audio quality rating (null if not provided)
          example: 5
        comment:
          type: string
          nullable: true
          description: Review comment (null if not provided)
          example: "Great story with excellent narration!"
        createdAt:
          type: string
          format: date-time
          description: When the review was created
          example: "2025-08-28T10:30:00Z"

    StoryRatingsResponse:
      type: object
      properties:
        avgContent:
          type: number
          format: float
          description: Average content rating
          example: 4.2
        avgAudio:
          type: number
          format: float
          description: Average audio rating
          example: 4.5
        count:
          type: integer
          description: Total number of reviews
          example: 45
        distribution:
          type: object
          properties:
            content:
              type: array
              items:
                type: object
                properties:
                  content_rating:
                    type: integer
                    example: 5
                  count:
                    type: integer
                    example: 25
              description: Content rating distribution
            audio:
              type: array
              items:
                type: object
                properties:
                  audio_rating:
                    type: integer
                    example: 5
                  count:
                    type: integer
                    example: 20
              description: Audio rating distribution

    ReviewEligibilityResponse:
      type: object
      properties:
        eligible:
          type: boolean
          description: Whether user is eligible to review
          example: true
        reason:
          type: string
          nullable: true
          description: Reason if not eligible
          example: "Must complete at least 50% of the story to review"

    UserReviewsResponse:
      type: object
      properties:
        reviews:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Review ID
              contentRating:
                type: integer
                minimum: 1
                maximum: 5
              audioRating:
                type: integer
                minimum: 1
                maximum: 5
                nullable: true
              comment:
                type: string
                nullable: true
              createdAt:
                type: string
                format: date-time
              story_id:
                type: string
                description: ID of the reviewed story
              story_title:
                type: string
                description: Title of the reviewed story
              story_author:
                type: string
                description: Author of the reviewed story
        total:
          type: integer
          description: Total number of reviews by user
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of reviews per page
        hasMore:
          type: boolean
          description: Whether there are more reviews available

    # Multi-language Schema Definitions
    LocalizedStoryContent:
      type: object
      description: Complete localized story content with metadata and chapters
      properties:
        storyId:
          type: string
          description: Unique story identifier
        language:
          type: string
          pattern: ^[a-z]{2}$
          description: Target language code (ISO 639-1)
        title:
          type: string
          description: Localized story title
        author:
          type: string
          description: Localized author name
        description:
          type: string
          description: Localized story description
        metadata:
          type: object
          description: Complete translated metadata
          additionalProperties: true
        chapters:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedChapter'
          description: All story chapters with translated content
        assets:
          type: object
          description: Asset URLs with language-specific paths and fallbacks
          additionalProperties:
            type: string
        translationQuality:
          $ref: '#/components/schemas/TranslationValidation'
        syncVersion:
          type: string
          description: Version identifier for sync tracking and conflict resolution
        contentHash:
          type: string
          description: Hash of content for integrity verification and change detection
        translationStatus:
          type: string
          enum: [master, translated, in_progress, needs_review]
          description: Current translation status
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    LocalizedChapter:
      type: object
      description: Single chapter with localized content
      properties:
        id:
          type: string
          description: Chapter identifier
        title:
          type: string
          description: Localized chapter title
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/ContentBlock'
          description: Chapter content blocks with translations

    LanguageInfo:
      type: object
      description: Language availability and quality information
      properties:
        language:
          type: string
          pattern: ^[a-z]{2}$
          description: Language code (ISO 639-1)
        languageName:
          type: string
          description: Human-readable language name
        isOrigin:
          type: boolean
          description: Whether this is the master/origin language
        translationQuality:
          type: number
          minimum: 0
          maximum: 100
          description: Translation quality score (0-100)
        completeness:
          type: number
          minimum: 0
          maximum: 1
          description: Translation completeness ratio (0-1)
        lastUpdated:
          type: string
          format: date-time
          description: Last translation update timestamp

    MultiLanguageImportRequest:
      type: object
      description: Request for importing multilanguage story content
      required:
        - masterLanguage
        - storyData
      properties:
        masterLanguage:
          type: string
          pattern: ^[a-z]{2}$
          description: Master/origin language code
        storyData:
          type: object
          description: Story data in master language
          additionalProperties: true
        translations:
          type: object
          description: Translation data keyed by language code
          additionalProperties:
            type: object
            description: Translated story content
            additionalProperties: true
        assets:
          type: object
          description: Asset localization mappings
          additionalProperties:
            type: object
            additionalProperties:
              type: string
        metadata:
          type: object
          description: Import metadata and options
          properties:
            importSource:
              type: string
              description: Source system or service
            validateTranslations:
              type: boolean
              default: true
              description: Whether to validate translation quality
            overwriteExisting:
              type: boolean
              default: false
              description: Whether to overwrite existing translations

    ChapterTranslation:
      type: object
      description: Single chapter translation for progressive updates
      properties:
        id:
          type: string
          description: Chapter identifier
        title:
          type: string
          description: Translated chapter title
        content:
          type: array
          items:
            $ref: '#/components/schemas/ContentBlock'
          description: Translated content blocks

    TranslationValidation:
      type: object
      description: Translation quality assessment and validation results
      properties:
        valid:
          type: boolean
          description: Whether translation passes validation
        qualityScore:
          type: integer
          minimum: 0
          maximum: 100
          description: Overall quality score (0-100)
        errors:
          type: array
          items:
            type: string
          description: List of validation errors
        warnings:
          type: array
          items:
            type: string
          description: List of validation warnings
        metrics:
          type: object
          description: Detailed quality metrics
          properties:
            completeness:
              type: number
              minimum: 0
              maximum: 1
              description: Translation completeness ratio
            wordVariance:
              type: number
              minimum: 0
              description: Word count variance from original
            structuralIntegrity:
              type: number
              minimum: 0
              maximum: 1
              description: Structural integrity score
            culturalAdaptation:
              type: number
              minimum: 0
              maximum: 1
              description: Cultural adaptation score

    StorygenData:
      type: object
      description: Complete story data structure from StoryGen import system
      required:
        - title
        - chapters
        - assets
      properties:
        title:
          type: string
          description: Story title
        author:
          type: string
          description: Story author
        description:
          type: string
          description: Story description
        genre:
          type: string
          description: Story genre
        tags:
          type: array
          items:
            type: string
          description: Story tags
        chapters:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              chapterNumber:
                type: number
              blocks:
                type: array
                items:
                  $ref: '#/components/schemas/ContentBlock'
              duration:
                type: number
              audioUrl:
                type: string
          description: Story chapters with content blocks
        assets:
          type: object
          properties:
            images:
              type: object
              additionalProperties:
                type: object
                properties:
                  id:
                    type: string
                  filename:
                    type: string
                  description:
                    type: string
                  type:
                    type: string
                    enum: [cover, thumbnail, chapter, scene, character]
            audio:
              type: object
              additionalProperties:
                type: object
                properties:
                  id:
                    type: string
                  filename:
                    type: string
                  duration:
                    type: number
          description: Story assets (images and audio files)
        prompt:
          type: string
          description: Original generation prompt
        length:
          type: string
          description: Target story length
        outline:
          type: string
          description: Story outline
        plot:
          type: string
          description: Plot summary
        characters:
          type: string
          description: Character descriptions
        story:
          type: string
          description: Full story text
        review:
          type: object
          description: Story review and quality metrics
        image_data:
          type: object
          description: Image generation metadata
        folder_name:
          type: string
          description: Source folder name
        timestamp:
          type: string
          description: Generation timestamp
        final_rating:
          type: number
          description: Final quality rating
        quality_achieved:
          type: boolean
          description: Whether quality threshold was met

tags:
  - name: Health
    description: API health check endpoints
  - name: Authentication
    description: User authentication via Auth0
  - name: Stories
    description: Story management and discovery
  - name: Content
    description: Content delivery with automatic language fallback (text, audio, images)
  - name: Import
    description: Story import system with multilanguage support
  - name: Feedback
    description: User feedback and ratings
  - name: Reviews
    description: Book review system with separate content and audio ratings
  - name: Progressive Upload
    description: Progressive story upload system for handling large stories with multiple assets
  - name: User
    description: User library and activity management
  - name: User Profile
    description: User profile management and preferences
  - name: User Statistics
    description: Reading statistics and achievements
  - name: User Sessions
    description: Reading session tracking and analytics
  - name: Support
    description: FAQ and support system
  - name: Assets
    description: Asset management and serving
  - name: Billing
    description: Subscription billing and payment management via Dodo Payments
  - name: Webhooks
    description: Webhook endpoints for external service integration
  - name: Admin
    description: Administrative endpoints requiring elevated privileges
  - name: Testing
    description: Development and testing endpoints 